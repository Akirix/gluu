# headless for peer discovery
apiVersion: v1
kind: Service
metadata:
  name: {{ template "gluu.fullname" . }}
  namespace: {{ .Values.global.namespace }}
  labels:
{{ include "gluu.labels" . | indent 4 }}
spec:
  type: {{ .Values.service.type }}
{{- if (and (eq .Values.service.type "ClusterIP") (not (empty .Values.service.clusterIP))) }}
  clusterIP: "{{ .Values.service.clusterIP }}"
{{- end }}
{{- if .Values.service.externalIPs }}
  externalIPs:
{{ toYaml .Values.service.externalIPs | indent 4 }}
{{- end }}
{{- if .Values.service.loadBalancerIP }}
  loadBalancerIP: "{{ .Values.service.loadBalancerIP }}"
{{- end }}
{{- if .Values.service.loadBalancerSourceRanges }}
  loadBalancerSourceRanges:
{{ toYaml .Values.service.loadBalancerSourceRanges | indent 4 }}
{{- end }}
  selector:
{{ include "gluu.labels" . | indent 4 }}
  ports:
  - port: {{ .Values.service.ldaps.port }}
    name: ldaps
    targetPort: ldaps
    protocol: TCP
{{- if eq .Values.service.type "NodePort" }}
    nodePort: {{ .Values.service.ldaps.nodePort }}
{{- end }}
  - port: {{ .Values.service.ldap.port }}
    name: ldap
    targetPort: ldap
    protocol: TCP
{{- if eq .Values.service.type "NodePort" }}
    nodePort: {{ .Values.service.ldap.nodePort }}
{{- end }}
  - port: {{ .Values.service.replication.port }}
    name: replication
    targetPort: replication
    protocol: TCP
{{- if eq .Values.service.type "NodePort" }}
    nodePort: {{ .Values.service.replication.nodePort }}
{{- end }}
  - port: {{ .Values.service.admin.port }}
    name: admin
    targetPort: admin
    protocol: TCP
{{- if eq .Values.service.type "NodePort" }}
    nodePort: {{ .Values.service.admin.nodePort }}
{{- end }}